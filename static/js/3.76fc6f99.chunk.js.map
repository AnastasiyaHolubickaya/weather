{"version":3,"sources":["pages/startPage/startPage.module.css","components/CardDay/cardDay.module.css","components/CardDay/CardDay.tsx","pages/startPage/StartPage.tsx","utils/filter.tsx"],"names":["module","exports","CardDay","weatherList","lang","celsius","weekDays","getNameDay","dt","Card","className","cl","card","date","ru","en","temp","img","src","weather","icon","alt","main","title","converterTemperature","StartPage","dataWeather","coordinates","latitude","longitude","mass","data","map","list","index","push","filter","container","cityName","countryRu","country","block","span","i18next","t","block_temp","description","feels_like","block_info","wind","font_style","deg","Math","round","speed","humidity","visibility","pressure","block_icon","flex","state","center","zoom","coords","block_cards","toString"],"mappings":"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","file":"static/js/3.76fc6f99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"startPage_container__qXwu6\",\"title\":\"startPage_title__3889D\",\"block\":\"startPage_block__1x-Bz\",\"card\":\"startPage_card__3x566\",\"span\":\"startPage_span__2NhfW\",\"date\":\"startPage_date__gGmF3\",\"block_temp\":\"startPage_block_temp__1pkJ_\",\"img\":\"startPage_img__311Xw\",\"block_info\":\"startPage_block_info__2zg8-\",\"block_cards\":\"startPage_block_cards__2DZ0m\",\"font_style\":\"startPage_font_style__3TdM4\",\"flex\":\"startPage_flex__1YHFm\",\"coords\":\"startPage_coords__UaMnC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"cardDay_card__-FF7h\",\"img\":\"cardDay_img__2nrvL\",\"temp\":\"cardDay_temp__2zFbL\",\"date\":\"cardDay_date__2oarY\"};","import React from \"react\";\r\nimport cl from \"./cardDay.module.css\"\r\nimport Card from '@material-ui/core/Card';\r\nimport {getNameDay} from \"../../utils/getDate\";\r\nimport {converterTemperature} from \"../../utils/converterTemperature\";\r\n\r\ntype propsType = {\r\n    weatherList?: any\r\n    lang?: string\r\n    celsius: boolean\r\n}\r\n\r\n\r\nexport const CardDay: React.FC<propsType> = ({weatherList, lang, celsius}) => {\r\n    let weekDays = getNameDay(weatherList.dt);\r\n    return (\r\n        <Card className={cl.card}>\r\n            <p className={cl.date}>\r\n                {\r\n                    lang === 'ru' ? weekDays.ru : weekDays.en\r\n                }\r\n            </p>\r\n            <div className={cl.temp}>\r\n                <div className={cl.img}>\r\n                    <img src={`iconsWeather/${weatherList.weather[0].icon}`}\r\n                         alt={weatherList.weather[0].main}\r\n                         title={weatherList.weather[0].main}\r\n                    />\r\n                </div>\r\n                <span>{\r\n                    celsius\r\n                        ? `${weatherList.main.temp}℃`\r\n                        : `${converterTemperature(weatherList.main.temp)}°F`}</span>\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n};","import React from \"react\";\r\nimport cl from \"./startPage.module.css\"\r\nimport i18next from 'i18next';\r\nimport {converterTemperature} from \"../../utils/converterTemperature\";\r\nimport Card from '@material-ui/core/Card';\r\nimport {YMaps, Map} from 'react-yandex-maps';\r\nimport {CardDay} from \"../../components/CardDay/CardDay\";\r\nimport {filter} from \"../../utils/filter\";\r\n\r\ntype ownPropsType = {\r\n    dataWeather: any\r\n    date: { en: string, ru: string }\r\n    lang: string\r\n    celsius: boolean\r\n}\r\n\r\n\r\nconst StartPage: React.FC<ownPropsType> = ({dataWeather, date, lang, celsius}) => {\r\n\r\n    const {latitude = 0, longitude = 0} = {...dataWeather.coordinates};\r\n    let mass:Array<object> = filter(dataWeather.weatherList);\r\n    return (\r\n        <div className={cl.container}>\r\n            <div className={cl.title}>\r\n                <p>{dataWeather.cityName},\r\n                    {\r\n                        lang === 'ru' ? dataWeather.countryRu : dataWeather.country\r\n                    }\r\n                </p>\r\n            </div>\r\n            <div className={cl.block}>\r\n                <Card className={cl.card}>\r\n                    <div>\r\n                        <span className={cl.span}>{i18next.t('currently_date')}</span>\r\n                        <p className={cl.date}>\r\n                            {\r\n                                lang === 'ru' ? date.ru : date.en\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <div className={cl.block_temp}>\r\n                        <div className={cl.img}>\r\n                            <img src={`iconsWeather/${dataWeather.weatherList[0].weather[0].icon}`}\r\n                                 alt={dataWeather.weatherList[0].weather[0].main}\r\n                                 title={dataWeather.weatherList[0].weather[0].main}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <p>\r\n                                {\r\n                                    celsius ? `${dataWeather.weatherList[0].main.temp}℃` : `${converterTemperature(dataWeather.weatherList[0].main.temp)}°F`\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                        <div>\r\n                            <p>{dataWeather.weatherList[0].weather[0].description}</p>\r\n                            <span>{i18next.t('feels')}</span>\r\n                            <span>\r\n                               {\r\n                                   celsius ? `${dataWeather.weatherList[0].main.feels_like}℃` : `${converterTemperature(dataWeather.weatherList[0].main.feels_like)}°F`\r\n                               }\r\n                           </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className={cl.block_info}>\r\n                        <div className={cl.wind}>\r\n                            <p className={cl.font_style}>{i18next.t('wind')}</p>\r\n                            <p>   {\r\n                                lang === 'ru' ? dataWeather.weatherList[0].wind.deg.ru : dataWeather.weatherList[0].wind.deg.en\r\n                            }\r\n                            </p>\r\n                            <p>{Math.round(dataWeather.weatherList[0].wind.speed)} {i18next.t('ms')}</p>\r\n                        </div>\r\n                        <div className={cl.humidity}>\r\n                            <p className={cl.font_style}>{i18next.t('humidity')} </p>\r\n                            <p>{dataWeather.weatherList[0].main.humidity}%</p>\r\n                        </div>\r\n                        <div className={cl.visibility}>\r\n                            <p className={cl.font_style}>{i18next.t('visibility')} </p>\r\n                            <p>{dataWeather.weatherList[0].visibility} {i18next.t('km')}</p>\r\n                        </div>\r\n                        <div className={cl.pressure}>\r\n                            <p className={cl.font_style}>{i18next.t('pressure')} </p>\r\n                            <p>{dataWeather.weatherList[0].main.pressure} {i18next.t('mmHg')}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className={cl.block_icon}>\r\n                    </div>\r\n                </Card>\r\n                <Card className={cl.card}>\r\n                    <div className={cl.flex}>\r\n                        <YMaps>\r\n                            <div>\r\n                                <Map\r\n                                    state={{center: [latitude, longitude], zoom: 9,}}\r\n                                />\r\n                            </div>\r\n                        </YMaps>\r\n                        <div className={cl.coords}>\r\n                            <p>{i18next.t('latitude')}: {latitude}</p>\r\n                            <p>{i18next.t('longitude')}: {longitude}</p>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n                <div className={cl.block_cards}>\r\n                    {\r\n                        mass.map((list: any, index: number) =>\r\n                           {return <CardDay\r\n                                weatherList={list}\r\n                                key={index.toString()}\r\n                                celsius={celsius}\r\n                                lang={lang}\r\n                            />}\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default StartPage;","export const filter = (data: any) => {\r\n    let mass: any = [];\r\n     data.map((list: any, index: number) => index % 8 === 0 && mass.push(list));\r\n    return mass\r\n};"],"sourceRoot":""}