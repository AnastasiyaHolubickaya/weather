{"version":3,"sources":["components/Preloader/Preloader.module.css","components/button/Button.tsx","components/searchComponent/FormControls.tsx","components/searchComponent/Search.tsx","redux/reducer.ts","api/api.ts","redux/classCity.ts","redux/ThunksCreator.ts","components/header/Header.tsx","pages/detailPage/DetailPage.tsx","components/Preloader/Preloader.tsx","pages/404Page/Page404.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","components/searchComponent/FormControls.module.css","components/searchComponent/search.module.css","components/header/header.module.css","components/button/button.module.css"],"names":["module","exports","Button","value","onClick","className","classes","btn","FormControl","children","meta","touched","error","showError","undefined","spanError","Input","props","input","restprops","validate","RegExp","test","SettingPageForm","reduxForm","form","handleSubmit","onSubmit","cl","Field","name","component","autoFocus","type","placeholder","Search","getWeather","formData","text","initialState","dataWeather","coord","lat","lon","country","cityName","timezone","weatherList","clouds","dt_txt","visibility","main","feels_like","humidity","pressure","temp","temp_max","temp_min","weather","description","icon","id","wind","deg","gust","speed","messageError","coordUserLocation","currentData","inicialization","actions","data","mess","date","init","reducer","state","action","ServerRequest","baseURL","api_key","fetch","this","then","json","catch","console","instance","Reques","getInstance","City","windDirection","DEG101","DEG123","DEG146","DEG168","DEG191","DEG213","DEG236","DEG258","DEG281","DEG303","DEG326","DEG348","abr","i","length","alpha2","english","list","push","Math","round","getWindDirection","dispatch","a","getWeatherForCoord","response","getWeatherForCityName","getFileCountry","iso","cod","city","setCountry","setWeatherList","message","Header","header","Component","connect","DetailPage","block","Preloader","Page404","to","AsyncPages","StartPage","loadable","loader","loading","App","navigator","geolocation","getCurrentPosition","position","setUserLocation","coords","latitude","longitude","timestamp","prevProps","prevState","snapshot","initialization","exact","path","render","app","Date","months","strDate","getDay","getDate","getMonth","getFullYear","getHours","getMinutes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.c2c1c8bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Preloader_block__do3O4\"};","import React from \"react\";\r\nimport classes from './button.module.css';\r\n\r\ntype propsType = {\r\n    value: string\r\n    onClick?: () => void\r\n}\r\n\r\nconst Button: React.FC<propsType> = ({value, onClick}) => {\r\n    return (\r\n        <div>\r\n            <button className={classes.btn} onClick={onClick}> {value} </button>\r\n        </div>\r\n    )\r\n};\r\nexport default Button;","import React from \"react\";\r\nimport classes from \"./FormControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\ntype formPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<formPropsType> = ({children, meta: {touched, error}}) => {\r\n    const showError = touched && error;\r\n    return (\r\n        <div className={showError ? classes.error : undefined}>\r\n            {children}<br/>\r\n            {showError && <span className={classes.spanError}>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restprops} = props;\r\n    return <FormControl {...props}> <input {...input} {...restprops} className={classes.input}/></FormControl>\r\n\r\n};\r\n","import React from \"react\";\r\nimport cl from \"./search.module.css\"\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport Button from \"../button/Button\";\r\nimport {Input} from \"./FormControls\";\r\n\r\n\r\ntype ownPropsType = {}\r\ntype formDataType = {\r\n    text: string\r\n}\r\ntype validatorType = (value: string) => string | undefined\r\n\r\n\r\nconst validateSumbol = (): validatorType => (value) => {\r\n    if (value !== undefined) {\r\n        let regex = new RegExp(/^[a-zа-яё]+$/i);\r\n        if (!regex.test(value)) return (`разрешен ввод только букв латинского алфавита и кирилицы`);\r\n    }\r\n    return undefined;\r\n};\r\nconst validate = validateSumbol();\r\n\r\nconst formSubmit: React.FC<InjectedFormProps<formDataType> & ownPropsType> = ({handleSubmit, error,}) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit} className={cl.form}>\r\n                <Field name={\"text\"} className={cl.input}\r\n                       component={Input}\r\n                       autoFocus\r\n                       type=\"text\"\r\n                       placeholder={'enter city'}\r\n                       validate={[validate]}/>\r\n                {\r\n                    !error && <div>{error}</div>\r\n                }\r\n                <Button value=\"search\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\nconst SettingPageForm = reduxForm<formDataType, ownPropsType>({\r\n    form: 'search'\r\n})(formSubmit);\r\n\r\ninterface IComponentType {\r\n    getWeather: any\r\n}\r\n\r\nexport const Search: React.FC<IComponentType> = ({getWeather}) => {\r\n\r\n    const onSubmit = (formData: formDataType) => {\r\n        getWeather(null, null, formData.text);\r\n    };\r\n\r\n    return (\r\n        <SettingPageForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\n\r\n","import {InferActionType} from \"./store\";\r\n\r\n\r\nlet initialState = {\r\n    dataWeather: {\r\n        coord: {lat: 0, lon: 0},\r\n        country: '',\r\n        cityName: '',\r\n        timezone: 0,\r\n        weatherList: [{\r\n            clouds: {},\r\n            dt_txt: '',\r\n            visibility: 0,\r\n            main: {\r\n                feels_like: 0,\r\n                humidity: 0,\r\n                pressure: 0,\r\n                temp: 0,\r\n                temp_max: 0,\r\n                temp_min: 0\r\n            },\r\n            weather: [{\r\n                description: '',\r\n                icon: '',\r\n                id: 0,\r\n                main: ''\r\n            }],\r\n            wind: {\r\n                deg: 0,\r\n                gust: 0,\r\n                speed: 0\r\n            }\r\n        }]\r\n    },\r\n    messageError: '',\r\n    coordUserLocation: {\r\n        lat: 0,\r\n        lon: 0\r\n    },\r\n    currentData: '',\r\n    inicialization: false\r\n};\r\nexport type initialStateType = typeof initialState;\r\nexport type ActionsType = InferActionType<typeof actions>;\r\n\r\n\r\nconst reducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_DATA_WEATHER\":\r\n            return {\r\n                ...state,\r\n                dataWeather: action.data\r\n            };\r\n        case \"SET_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                messageError: action.mess\r\n            };\r\n\r\n        case \"SET_USER_LOCATION\":\r\n            return {\r\n                ...state,\r\n                coordUserLocation: action.coord,\r\n                currentData: action.date,\r\n            };\r\n        case \"SET_INITIALISATION\":\r\n            return {\r\n                ...state,\r\n                inicialization: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n//(0 °C × 9/5) + 32\r\nexport const actions = {\r\n    setDataWeather: (data: any) => ({type: \"SET_DATA_WEATHER\", data} as const),\r\n    setMessage: (mess: string) => ({type: \"SET_MESSAGE\", mess} as const),\r\n    setUserLocal: (lat: number, lon: number, date: string) => ({\r\n        type: \"SET_USER_LOCATION\",\r\n        coord: {lat, lon},\r\n        date\r\n    } as const),\r\n    initialisation: (init: boolean) => ({type: \"SET_INITIALISATION\", init} as const),\r\n};\r\n\r\nexport default reducer;\r\n\r\n","class ServerRequest {\r\n    private baseURL = \"https://api.openweathermap.org/data/2.5/forecast?\";\r\n    private api_key = \"6f4d4317a3c560906fa4cb8674063b92\";\r\n    private static instance: ServerRequest;\r\n\r\n    private constructor() {\r\n    };\r\n\r\n    static getInstance(): ServerRequest {\r\n        if (typeof ServerRequest.instance === 'object') {\r\n            return ServerRequest.instance;\r\n        }\r\n        ServerRequest.instance = new ServerRequest();\r\n        return ServerRequest.instance;\r\n    }\r\n\r\n    getWeatherForCityName(cityName: string) {\r\n        return fetch(`${this.baseURL}q=${cityName}&appid=${this.api_key}`)\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            })\r\n    }\r\n\r\n    getWeatherForCoord(lat: number, lon: number) {\r\n        return fetch(`${this.baseURL}lat=${lat}&lon=${lon}&appid=${this.api_key}`)\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            })\r\n    }\r\n\r\n    getFileCountry() {\r\n        return fetch(\"iso.json\")\r\n            .then(data => data.json())\r\n            .then(data => {\r\n                return data;\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const Reques = ServerRequest.getInstance();\r\n","export class City {\r\n    public cityName = \"\";\r\n    public coord = {\r\n        lat: 0,\r\n        lon: 0\r\n    };\r\n    public timezone = 0;\r\n    protected country = \"\";\r\n\r\n    protected weatherList: any = [];\r\n\r\n// определяет направление ветра  по градусам\r\n    getWindDirection(deg: number) {\r\n        let windDirection = '';\r\n        const DEG11 = 11.25, DEG33 = 33.75, DEG56 = 56.25, DEG78 = 78.25, DEG101 = 101.25,\r\n            DEG123 = 123.75, DEG146 = 146.25, DEG168 = 168.75, DEG191 = 191.25, DEG213 = 213.75,\r\n            DEG236 = 236.25, DEG258 = 258.75, DEG281 = 281.25, DEG303 = 303.75, DEG326 = 326.25, DEG348 = 348.75;\r\n        if (deg >= DEG348 && deg < DEG11) {\r\n            windDirection = \"north\"\r\n        } else if (deg >= DEG11 && deg < DEG33) {\r\n            windDirection = \"north north-east\"\r\n        } else if (deg >= DEG33 && deg < DEG56) {\r\n            windDirection = \"north-east\"\r\n        } else if (deg >= DEG56 && deg < DEG78) {\r\n            windDirection = \"east north-east\"\r\n        } else if (deg >= DEG78 && deg < DEG101) {\r\n            windDirection = \"east\"\r\n        } else if (deg >= DEG101 && deg < DEG123) {\r\n            windDirection = \"east south-east\"\r\n        } else if (deg >= DEG123 && deg < DEG146) {\r\n            windDirection = \"south-east\"\r\n        } else if (deg >= DEG146 && deg < DEG168) {\r\n            windDirection = \"south south-east\"\r\n        } else if (deg >= DEG168 && deg < DEG191) {\r\n            windDirection = \"south\"\r\n        } else if (deg >= DEG191 && deg < DEG213) {\r\n            windDirection = \"south south-west\"\r\n        } else if (deg >= DEG213 && deg < DEG236) {\r\n            windDirection = \"south-west\"\r\n        } else if (deg >= DEG236 && deg < DEG258) {\r\n            windDirection = \"west south-west\"\r\n        } else if (deg >= DEG258 && deg < DEG281) {\r\n            windDirection = \"west\"\r\n        } else if (deg >= DEG281 && deg < DEG303) {\r\n            windDirection = \"west north-west\"\r\n        } else if (deg >= DEG303 && deg < DEG326) {\r\n            windDirection = \"north-west\"\r\n        } else if (deg >= DEG326 && deg < DEG348) {\r\n            windDirection = \"north north-west\"\r\n        }\r\n        return windDirection;\r\n    }\r\n\r\n// data - json объект с полным и сокращенным зазванием стран по стандарту iso3166\r\n    setCountry(data: any, abr: string) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (abr === data[i].alpha2) {\r\n                this.country = data[i].english\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getCountry() {\r\n        return this.country\r\n    }\r\n\r\n//list - массив с температурными данными (температура в кельвинах, давление, влажность, видимость, направление ветра в градусах ...)\r\n    setWeatherList(list: listType) {\r\n        const ABSOLUT_ZERO = -273.15;\r\n        const ONE_hPa = 0.75;\r\n        this.weatherList.push({\r\n            clouds: list.clouds,\r\n            dt_txt: list.dt_txt,\r\n            visibility: list.visibility / 1000,\r\n            main: {\r\n                feels_like: Math.round(list.main.feels_like - (-ABSOLUT_ZERO)),\r\n                humidity: list.main.humidity,\r\n                pressure: Math.round(list.main.pressure * ONE_hPa),\r\n                temp: Math.round(list.main.temp - (-ABSOLUT_ZERO)),\r\n                temp_max: Math.round(list.main.temp_max - (-ABSOLUT_ZERO)),\r\n                temp_min: Math.round(list.main.temp_min - (-ABSOLUT_ZERO))\r\n            },\r\n            weather: [{\r\n                description: list.weather[0].description,\r\n                icon: list.weather[0].icon,\r\n                id: list.weather[0].id,\r\n                main: list.weather[0].main\r\n            }],\r\n            wind: {\r\n                deg: this.getWindDirection(list.wind.deg),\r\n                gust: list.wind.gust,\r\n                speed: list.wind.speed\r\n            }\r\n        })\r\n\r\n    }\r\n}\r\n\r\ntype listType = {\r\n    clouds: {}\r\n    dt_txt: string\r\n    visibility: number\r\n    main: {\r\n        feels_like: number\r\n        humidity: number\r\n        pressure: number\r\n        temp: number\r\n        temp_max: number\r\n        temp_min: number\r\n    }\r\n    weather: [{\r\n        description: string\r\n        icon: string\r\n        id: number\r\n        main: string\r\n    }]\r\n    wind: {\r\n        deg: number\r\n        gust: number\r\n        speed: number\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {actions, ActionsType} from \"./reducer\";\r\nimport {BaseThuncType} from \"./store\";\r\nimport {Reques} from \"../api/api\";\r\nimport {City} from \"./classCity\";\r\n\r\n\r\ntype ThuncType = BaseThuncType<ActionsType>;\r\n\r\nexport const getWeather = (lat: number | null = null, lon: number | null = null, cityName: string | null = null): ThuncType => async (dispatch) => {\r\n    let response;\r\n    let iso;\r\n    //получаем массив с погодными данными (https://openweathermap.org/api)\r\n    if (lat !== null && lon !== null) {\r\n        response = await Reques.getWeatherForCoord(lat, lon);// данные о погоде по текущим координатам пользователя\r\n    } else if (cityName !== null) {\r\n        response = await Reques.getWeatherForCityName(cityName);// данные о погоде по названию города \r\n    }\r\n    iso = await Reques.getFileCountry();//файл с сокращенным и полным названием страны (по стандарту iso3166)\r\n    if (response.cod === '200' && iso !== undefined) {\r\n        dispatch(actions.initialisation(true));\r\n        let dataWeather = new City();\r\n        dataWeather.cityName = response.city.name;\r\n        dataWeather.setCountry(iso, response.city.country);\r\n        dataWeather.timezone = response.city.timezone;\r\n        dataWeather.coord.lat = response.city.coord.lat;\r\n        dataWeather.coord.lon = response.city.coord.lon;\r\n        for (let i = 0; i < response.list.length; i++) {\r\n            dataWeather.setWeatherList(response.list[i])\r\n        }\r\n        dispatch(actions.setDataWeather(dataWeather));\r\n    } else {\r\n        dispatch(actions.setMessage(response.message))\r\n    }\r\n\r\n};\r\n\r\nexport const setUserLocation = (lat: number, lon: number, timestamp: number): ThuncType => async (dispatch) => {\r\n    let date: Date = new Date(timestamp);\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    let strDate: string = `${days[date.getDay()]}, ${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}, ${date.getHours()}:${date.getMinutes()} `;\r\n    dispatch(actions.setUserLocal(lat, lon, strDate));\r\n\r\n};","import React, {Component} from \"react\";\r\nimport cl from \"./header.module.css\"\r\nimport {Search} from \"../searchComponent/Search\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getWeather} from \"../../redux/ThunksCreator\";\r\n\r\ninterface IMyComponentState {\r\n\r\n}\r\n\r\ntype mapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype mapDispatchPropsType = {\r\n    getWeather: any\r\n}\r\ntype ownPropsType = mapDispatchPropsType & mapStatePropsType\r\n\r\n\r\nclass Header extends Component<ownPropsType, IMyComponentState> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <header className={cl.header}>\r\n\r\n                <Search\r\n                    getWeather={this.props.getWeather}\r\n                />\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({});\r\n\r\nexport default connect(mapStateToProps, {getWeather})(Header);","import React, {Component} from \"react\";\r\nimport cl from \"./detail.module.css\"\r\n\r\n\r\n\r\n\r\ntype propsType={\r\n\r\n}\r\n\r\n\r\nexport class DetailPage extends Component<propsType> {\r\n    render() {\r\n\r\n        return (\r\n            <div className={cl.block}>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport classes from './Preloader.module.css';\r\n\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={classes.block}>\r\n           идет загрузка данных...\r\n        </div>\r\n    )\r\n};\r\nexport default Preloader;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport const Page404 = () =>{\r\n\r\n    return(\r\n        <div>\r\n            <p>\r\n                This is not the page that you are looking for!\r\n                <Link to='/'>Go Home</Link>\r\n            </p>\r\n        </div>\r\n    )\r\n};","import React, {Component} from 'react';\nimport './style.css';\nimport Header from \"./components/header/Header\";\n//import {StartPage} from \"./pages/startPage/StartPage\";\nimport {Route} from \"react-router\";\nimport loadable from 'react-loadable';\nimport {DetailPage} from \"./pages/detailPage/DetailPage\";\nimport {AppStateType} from \"./redux/store\";\nimport {connect} from \"react-redux\";\nimport {getWeather, setUserLocation} from \"./redux/ThunksCreator\";\nimport Preloader from \"./components/Preloader/Preloader\";\nimport {Page404} from \"./pages/404Page/Page404\";\nimport {Switch} from 'react-router-dom';\n\n\ntype mapStatePropsType = ReturnType<typeof mapStateToProps>\ntype mapDispatchPropsType = {\n    getWeather: (lat?: number | null, lon?: number | null, name?: string | null,) => void\n    setUserLocation: (lat: number, lon: number, timestamp: number) => void\n}\n\nconst AsyncPages = {\n    StartPage: loadable({\n        loader: () => import('./pages/startPage/StartPage'),\n        loading: Preloader\n    })\n};\n\nclass App extends Component<mapDispatchPropsType & mapStatePropsType> {\n\n    componentDidMount(): void {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                this.props.setUserLocation(position.coords.latitude, position.coords.longitude, position.timestamp);\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<mapDispatchPropsType & mapStatePropsType>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (this.props.coordUserLocation.lat !== prevProps.coordUserLocation.lat && this.props.coordUserLocation.lon !== prevProps.coordUserLocation.lon)\n            this.props.getWeather(this.props.coordUserLocation.lat, this.props.coordUserLocation.lon, null);\n    }\n\n    render() {\n        if (!this.props.initialization) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app\">\n                <Header/>\n                <Switch>\n                    <Route exact path='/' render={() =>\n                        <AsyncPages.StartPage\n                            dataWeather={this.props.dataWeather}\n                            coordUserLocation={this.props.coordUserLocation}\n                            date={this.props.date}\n                        />}/>\n                    <Route exact path='/detail' render={() => <DetailPage/>}/>\n                    <Route path={'*'} render={() => <Page404/>}/>\n                </Switch>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    coordUserLocation: state.app.coordUserLocation,\n    dataWeather: state.app.dataWeather,\n    date: state.app.currentData,\n    initialization: state.app.inicialization\n});\n\nexport default connect(mapStateToProps, {setUserLocation, getWeather})\n(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport reducer from \"./reducer\";\r\n\r\n\r\n\r\n\r\n\r\nlet reducers = combineReducers(\r\n    {\r\n        form: formReducer,\r\n        app: reducer\r\n    }\r\n);\r\ntype RootReduserType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReduserType>;\r\n\r\n\r\ntype PropertyTypes<T> = T extends {[key: string]: infer U} ?U : never\r\nexport  type InferActionType<T extends {[key: string]:(...args:any[])=>any}> = ReturnType<PropertyTypes<T>>\r\n\r\nexport type BaseThuncType<AT extends Action, TH=Promise<void> >= ThunkAction<TH,AppStateType, unknown, AT>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__|| compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <HashRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FormControls_input__1eFDN\",\"error\":\"FormControls_error__31xIz\",\"spanError\":\"FormControls_spanError__1AjRd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"search_form__13b1y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__agGeW\",\"btn_group\":\"header_btn_group__3XKW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__37bSv\"};"],"sourceRoot":""}